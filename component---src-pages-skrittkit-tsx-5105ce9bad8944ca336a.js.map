{"version":3,"sources":["webpack:///./src/components/NavBar.tsx","webpack:///./src/api/gw2_base.ts","webpack:///./src/api/gw2_market.ts","webpack:///./src/types/gw2-types.ts","webpack:///./src/components/GuildWarsComponents.tsx","webpack:///./src/utils/localStorage.ts","webpack:///./src/reducers/gwTrackedCards.ts","webpack:///./src/components/GW2ItemTrackerDashboard.tsx","webpack:///./src/pages/skrittkit.tsx","webpack:///(webpack)/buildin/module.js","webpack:///./content/images/hamburger-menu.png"],"names":["NavSection","useState","Collapsed","setCollapsed","className","to","href","onClick","src","Hamburger","getGW2APIInstance","method","axios","create","baseURL","timeout","headers","getItemPrice","itemId","a","Promise","resolve","reject","get","then","res","data","err","getItemDetails","dummyItemPriceData","id","whitelisted","buys","quantity","unit_price","sells","dummyItemData","name","description","type","level","rarity","vendor_value","default_skin","game_types","flags","restrictions","chat_link","icon","details","weight_class","defense","infusion_slots","attribute_adjustment","infix_upgrade","attribute","GuildWarsItemCard","key","PriceData","setPriceData","ItemData","setItemData","useEffect","bgImage","backgroundImage","height","width","objectFit","backgroundSize","style","PriceTag","price","gold","silver","copper","PriceBreakpoints","setPriceBreakpoints","console","log","Math","floor","querydata","useStaticQuery","Gold","Silver","Copper","PARA_STYLE","fixed","childImageSharp","setGWInventoryArray","localStorage","setItem","JSON","stringify","gwInventoryReducer","prevState","action","_data","find","o","push","extension","idArray","map","ele","newData","concat","newState","GW2PriceTracker","props","idInputRef","useRef","useReducer","state","dispatch","Init","setInit","_savedState","_str","getItem","parse","getGWInventoryArray","ref","newID","current","value","isInteger","tryInt","parseInt","i","GET_REQ","request","response","fetch","json","body","ok","SkrittKit","Object","query","module","exports","webpackPolyfill","deprecate","paths","children","defineProperty","enumerable","l"],"mappings":"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","file":"component---src-pages-skrittkit-tsx-5105ce9bad8944ca336a.js","sourcesContent":["import React, { useState } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { Navbar, NavbarHeading } from \"@blueprintjs/core\";\nimport Hamburger from \"../../content/images/hamburger-menu.png\";\n\n// const MobileNavbar = styled(\"div\")`\n// \tdisplay: block;\n// \t@media (min-width: 540px) {\n// \t\tdisplay: none;\n// \t}\n// `;\n\n// const DesktopNavbarSection = styled(\"div\")`\n// \tdisplay: none;\n// \t@media (min-width: 540px) {\n// \t\tdisplay: block;\n// \t}\n// `;\n\n// const ComponentStyle = styled(\"div\")`\n// \tmax-width: 1920px;\n// \tmargin: 0 auto;\n// \tz-index: 40;\n// `;\n\n// Navigation section always visible on top.\nfunction NavSection() {\n\t// State variables\n\tconst [Collapsed, setCollapsed] = useState(true);\n\n\tfunction MobileMenuToggle() {\n\t\tsetCollapsed(!Collapsed);\n\t}\n\treturn (\n\t\t/* // FIXME: ComponentStyle */\n\t\t<div>\n\t\t\t<Navbar>\n\t\t\t\t<div className=\"bp3-navbar-group bp3-align-left\">\n\t\t\t\t\t<NavbarHeading>WinterWildfire</NavbarHeading>\n\t\t\t\t\t{/* // FIXME: DesktopNavbarSection */}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className=\"bp3-navbar-divider\" />\n\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t<button className=\"bp3-button bp3-minimal bp3-icon-home\">Home</button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<button className=\"bp3-button bp3-minimal bp3-icon-document\">\n\t\t\t\t\t\t\tTutorials\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t<button className=\"bp3-button bp3-minimal bp3-icon-build\">Tools</button>\n\t\t\t\t\t\t<a href=\"https://gitlab.com/winterwildfire\">\n\t\t\t\t\t\t\t{/* git-repo */}\n\t\t\t\t\t\t\t<button className=\"bp3-button bp3-minimal bp3-icon-git-branch\">\n\t\t\t\t\t\t\t\tRepositories\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* // FIXME: */}\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"p-2 bp3-navbar-group bp3-align-right bp3-button bp3-minimal\"\n\t\t\t\t\t\tonClick={MobileMenuToggle}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img className=\"h-6 content-center\" src={Hamburger} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</Navbar>\n\t\t\t{/* FIXME: MobileNavbar */}\n\t\t\t<div>\n\t\t\t\t<div className={Collapsed ? `hidden` : \"viisble\"}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t<button className=\"bp3-fill bp3-button bp3-icon-home\">Home</button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"bp3-button bp3-icon-document bp3-fill\">Tutorials</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className=\"bp3-button bp3-icon-build bp3-fill\">Tools</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport { NavSection };\n","import axios, { AxiosInstance } from \"axios\";\n\ntype TMethod = \"get\" | \"post\" | \"put\";\n\n// Instance has headers and baseurl\nexport default function getGW2APIInstance(method: TMethod = \"get\"): AxiosInstance {\n\treturn axios.create({\n\t\tmethod: method,\n\t\tbaseURL: \"https://api.guildwars2.com/v2\",\n\t\ttimeout: 10000,\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t});\n}\n","import getGW2APIInstance from './gw2_base'\n\nexport type ItemPrice = {\n\tid: number\n\twhitelisted: boolean\n\tbuys: {\n\t\tquantity: number\n\t\tunit_price: number\n\t}\n\tsells: {\n\t\tquantity: number\n\t\tunit_price: number\n\t}\n}\n\nexport async function getItemPrice(itemId: number | string): Promise<ItemPrice> {\n\treturn new Promise<ItemPrice>((resolve, reject) => {\n\t\tgetGW2APIInstance()\n\t\t\t.get<ItemPrice>(`/commerce/prices/${itemId}`)\n\t\t\t.then(\n\t\t\t\t(res) => {\n\t\t\t\t\tresolve(res.data)\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\treject(err)\n\t\t\t\t},\n\t\t\t)\n\t})\n}\n\nexport type GW2Item = {\n\tname: string\n\tdescription: string // Mostly empty\n\ttype: string\n\tlevel: number\n\trarity: 'Fine'\n\tvendor_value: number\n\tdefault_skin: number\n\tgame_types: string[]\n\tflags: []\n\trestrictions: []\n\tid: number\n\tchat_link: string\n\ticon: string\n\tdetails: {\n\t\ttype: string\n\t\tweight_class: 'Heavy' | 'Light' | 'Medium'\n\t\tdefense: number\n\t\tinfusion_slots: []\n\t\tattribute_adjustment: string\n\t\tinfix_upgrade: {\n\t\t\tid: number\n\t\t\tattribute: {\n\t\t\t\tattribute: string\n\t\t\t\tmodifier: number\n\t\t\t}[]\n\t\t}\n\t}\n}\n\nexport async function getItemDetails(itemId: number | string): Promise<GW2Item> {\n\treturn new Promise<GW2Item>((resolve, reject) => {\n\t\tgetGW2APIInstance()\n\t\t\t.get<GW2Item>(`/items/${itemId}`)\n\t\t\t.then(\n\t\t\t\t(res) => {\n\t\t\t\t\tresolve(res.data)\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\treject(err)\n\t\t\t\t},\n\t\t\t)\n\t})\n}\n","import { ItemPrice, GW2Item } from '../api/gw2_market'\n\nexport const dummyItemPriceData: ItemPrice = {\n\tid: 0,\n\twhitelisted: true,\n\tbuys: {\n\t\tquantity: 0,\n\t\tunit_price: 0,\n\t},\n\tsells: {\n\t\tquantity: 0,\n\t\tunit_price: 0,\n\t},\n}\n\nexport const dummyItemData: GW2Item = {\n\tname: 'loading...',\n\tdescription: 'loading...',\n\ttype: 'loading...',\n\tlevel: 0,\n\trarity: 'Fine',\n\tvendor_value: 0,\n\tdefault_skin: 0,\n\tgame_types: [],\n\tflags: [],\n\trestrictions: [],\n\tid: 0,\n\tchat_link: 'loading...',\n\ticon: 'loading...',\n\tdetails: {\n\t\ttype: 'loading...',\n\t\tweight_class: 'Light',\n\t\tdefense: 0,\n\t\tinfusion_slots: [],\n\t\tattribute_adjustment: 'loading...',\n\t\tinfix_upgrade: {\n\t\t\tid: 0,\n\t\t\tattribute: [],\n\t\t},\n\t},\n}\n","import React, { useState, useEffect } from \"react\";\nimport { getItemPrice, ItemPrice, getItemDetails, GW2Item } from \"../api/gw2_market\";\nimport { dummyItemPriceData, dummyItemData } from \"../types/gw2-types\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport BackgroundImage from \"gatsby-background-image\";\n\ninterface IGuildWarsItemCard {\n\titemId: number;\n\tkey?: number;\n}\n\n/**  */\nexport function GuildWarsItemCard({ itemId, key }: IGuildWarsItemCard) {\n\tconst [Price, setPrice] = useState<number | null>(null);\n\tconst [PriceData, setPriceData] = useState<ItemPrice>(dummyItemPriceData);\n\tconst [ItemData, setItemData] = useState<GW2Item>(dummyItemData);\n\n\tconst { id, whitelisted, buys, sells } = PriceData;\n\tuseEffect(() => {\n\t\tgetItemDetails(itemId).then((res) => {\n\t\t\tsetItemData(res);\n\t\t});\n\t\tgetItemPrice(itemId).then((res) => {\n\t\t\tsetPriceData(res);\n\t\t});\n\t}, []);\n\n\tasync function Refresh() {\n\t\tawait getItemDetails(itemId);\n\t\tawait getItemPrice(itemId);\n\t}\n\n\tlet bgImage: React.CSSProperties = {\n\t\tbackgroundImage: `url(${ItemData.icon})`,\n\t\theight: \"48px\",\n\t\twidth: \"48px\",\n\t\tobjectFit: \"scale-down\",\n\t\tbackgroundSize: \"cover\",\n\t};\n\treturn (\n\t\t<>\n\t\t\t<div key={key} className=\"gw2_inventory_entry flex flex-row items-center pl-4\">\n\t\t\t\t<div className=\"inline_centered inventory_title_section\">\n\t\t\t\t\t<div style={bgImage} className=\"inline-block\"></div>\n\t\t\t\t\t<p className=\"inline-block ml-4 mb-0\">{ItemData.name}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-shrink\">\n\t\t\t\t\t<PriceTag price={buys.unit_price} />\n\t\t\t\t\t<PriceTag price={sells.unit_price} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-shrink\">\n\t\t\t\t\t<PriceTag price={buys.unit_price} />\n\t\t\t\t\t<PriceTag price={sells.unit_price} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\ntype IPriceTag = {\n\tprice: number;\n};\nexport function PriceTag({ price }: IPriceTag) {\n\tconst [PriceBreakpoints, setPriceBreakpoints] = useState({\n\t\tgold: 0,\n\t\tsilver: 0,\n\t\tcopper: 0,\n\t});\n\n\tuseEffect(() => {\n\t\tconsole.log(price);\n\t\tsetPriceBreakpoints({\n\t\t\tgold: Math.floor(price / 10000) % 100,\n\t\t\tsilver: Math.floor(price / 100) % 100,\n\t\t\tcopper: Math.floor(price) % 100,\n\t\t});\n\t\tconsole.log(PriceBreakpoints);\n\t}, [price]);\n\n\tconst querydata = useStaticQuery(graphql`\n\t\tquery {\n\t\t\tCopper: file(relativeDirectory: { eq: \"images/gw2\" }, name: { eq: \"Copper_coin\" }) {\n\t\t\t\tchildImageSharp {\n\t\t\t\t\tfixed(width: 15, height: 15) {\n\t\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSilver: file(relativeDirectory: { eq: \"images/gw2\" }, name: { eq: \"Silver_coin\" }) {\n\t\t\t\tchildImageSharp {\n\t\t\t\t\tfixed(width: 15, height: 15) {\n\t\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tGold: file(relativeDirectory: { eq: \"images/gw2\" }, name: { eq: \"Gold_coin\" }) {\n\t\t\t\tchildImageSharp {\n\t\t\t\t\tfixed(width: 15, height: 15) {\n\t\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst { Gold, Silver, Copper } = querydata;\n\tconst { gold, silver, copper } = PriceBreakpoints;\n\n\tconst PARA_STYLE = \"inline-block gw2_pricetag mb-0 pt-0\";\n\treturn (\n\t\t<div className=\"flex flex-row items-center inventory_price_tag\">\n\t\t\t{gold === 0 ? (\n\t\t\t\t<></>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<p className={PARA_STYLE}>{gold + \" \"}</p>\n\t\t\t\t\t<BackgroundImage\n\t\t\t\t\t\tclassName=\"-mb-1 mr-1 gw2_pricetag_icons\"\n\t\t\t\t\t\tfixed={Gold.childImageSharp.fixed}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{silver === 0 ? (\n\t\t\t\t<></>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<p className={PARA_STYLE}>{silver}</p>\n\t\t\t\t\t<BackgroundImage\n\t\t\t\t\t\tclassName=\"-mb-1 mr-1 gw2_pricetag_icons\"\n\t\t\t\t\t\tfixed={Silver.childImageSharp.fixed}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<p className={PARA_STYLE}>{copper}</p>\n\t\t\t<BackgroundImage\n\t\t\t\tclassName=\"-mb-1 mr-1 gw2_pricetag_icons\"\n\t\t\t\tfixed={Copper.childImageSharp.fixed}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","export type InventoryState = {\n\tid: number;\n\tname: string;\n\tminimum_alert?: number | undefined;\n\tmaximum_alert?: number | undefined;\n}[];\n\n// Name of the localStorage key\nconst STORAGE_KEY = \"GW2_INVENTORY_QUERIES\";\n\nexport function getGWInventoryArray(): InventoryState {\n\tlet _data: InventoryState;\n\n\tconst _str = localStorage.getItem(STORAGE_KEY);\n\tif (_str) {\n\t\t// Try to parse the data\n\t\ttry {\n\t\t\t_data = JSON.parse(_str);\n\t\t} catch {\n\t\t\t_data = [];\n\t\t}\n\t\treturn _data;\n\t} else {\n\t\treturn [];\n\t}\n}\n\nexport function setGWInventoryArray(data: InventoryState) {\n\tlocalStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n}\n","import {\n\tInventoryState,\n\tgetGWInventoryArray,\n\tsetGWInventoryArray,\n} from \"../utils/localStorage\";\nimport { getItemPrice, ItemPrice, getItemDetails, GW2Item } from \"../api/gw2_market\";\n\nexport type InventoryActions =\n\t| { type: \"add\"; id: number }\n\t| { type: \"clear\" }\n\t| { type: \"append\"; idArray: number[] }\n\t| { type: \"save\" }\n\t| { type: \"init\"; newState: InventoryState };\n\nexport function gwInventoryReducer(\n\tprevState: InventoryState,\n\taction: InventoryActions,\n): InventoryState {\n\t// Assign to temporary variable for immutability\n\tlet _data: InventoryState = prevState;\n\tswitch (action.type) {\n\t\tcase \"add\": {\n\t\t\tconst { id } = action;\n\t\t\tlet match = _data.find((o) => o.id === id);\n\t\t\t// Update storage, only if this id does not exist\n\t\t\tif (!match) {\n\t\t\t\t// Fetch item data\n\t\t\t\tgetItemDetails(id).then((res) => {\n\t\t\t\t\t_data.push({\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\tname: res.name,\n\t\t\t\t\t});\n\t\t\t\t\tsetGWInventoryArray(_data);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn _data;\n\t\t}\n\t\t// Appends a list of item ids, at end of list\n\t\tcase \"append\": {\n\t\t\tconst { idArray } = action;\n\t\t\tlet extension = idArray.map((ele) => ({\n\t\t\t\tid: ele,\n\t\t\t\tname: \"\",\n\t\t\t}));\n\t\t\tlet newData = _data.concat(extension);\n\t\t\tsetGWInventoryArray(newData);\n\t\t\treturn newData;\n\t\t}\n\t\tcase \"clear\": {\n\t\t\tsetGWInventoryArray([]);\n\t\t\treturn [];\n\t\t}\n\t\t// First load initialization\n\t\tcase \"init\": {\n\t\t\tconst { newState } = action;\n\t\t\treturn newState;\n\t\t}\n\t\t// Saves the current state\n\t\tcase \"save\": {\n\t\t\tsetGWInventoryArray(prevState);\n\t\t\treturn prevState;\n\t\t}\n\t}\n}\n","import React, { useState, useEffect, useReducer, Reducer, useRef } from \"react\";\nimport { getItemPrice, ItemPrice, getItemDetails, GW2Item } from \"../api/gw2_market\";\nimport { GuildWarsItemCard } from \"./GuildWarsComponents\";\n// Reducer\nimport { InventoryActions, gwInventoryReducer } from \"../reducers/gwTrackedCards\";\nimport { InventoryState, getGWInventoryArray } from \"../utils/localStorage\";\nimport { isInteger } from \"lodash\";\n\nexport default function GW2PriceTracker(props: any) {\n\tconst idInputRef = useRef<HTMLInputElement>(null);\n\n\tconst [state, dispatch] = useReducer<Reducer<InventoryState, InventoryActions>>(\n\t\tgwInventoryReducer,\n\t\t[],\n\t);\n\tconst [Init, setInit] = useState(true);\n\n\t// Read value and initialize state\n\tuseEffect(() => {\n\t\tif (Init) {\n\t\t\tlet _savedState = getGWInventoryArray();\n\t\t\tdispatch({ type: \"init\", newState: _savedState });\n\t\t\tsetInit(false);\n\t\t}\n\t}, []);\n\n\tfunction addCardItem(): boolean {\n\t\tlet newID = idInputRef.current?.value!;\n\t\tif (!isInteger(newID)) {\n\t\t\tlet tryInt = parseInt(newID);\n\t\t\tdispatch({ type: \"add\", id: tryInt });\n\t\t}\n\t\treturn false;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<form>\n\t\t\t\t<label>What is the new item ID ?</label>\n\t\t\t\t<input ref={idInputRef}></input>\n\t\t\t\t<button type=\"button\" onClick={addCardItem}>\n\t\t\t\t\tAdd\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch({ type: \"save\" });\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tSave\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch({ type: \"clear\" });\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tClear\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t{state.map((ele, i) => (\n\t\t\t\t<GuildWarsItemCard itemId={ele.id} key={i} />\n\t\t\t))}\n\t\t</>\n\t);\n}\n","import React, { useState } from \"react\";\nimport { graphql } from \"gatsby\";\nimport axios from \"axios\";\nimport priceAPI from \"../utils/priceAPI\";\nimport Img from \"gatsby-image\";\nimport { NavSection } from \"../components/NavBar\";\nimport {\n\tButton,\n\tIntent,\n\tBreadcrumbs,\n\tIBreadcrumbProps,\n\tIcon,\n\tCard,\n\tBreadcrumb,\n} from \"@blueprintjs/core\";\nimport { GW2_PriceTag } from \"../components/Decorations\";\nimport GW2ItemTrackerDashboard from \"../components/GW2ItemTrackerDashboard\";\n\ninterface GW2TP {\n\tdata: {\n\t\tid: number;\n\t\tname: string;\n\t\ticon: string;\n\t\tbuy_at: number;\n\t\tsell_at: number;\n\t\ttolerance: number;\n\t};\n}\n\ninterface Response_Items {\n\tdata: {\n\t\tname: string;\n\t\tdescription: string;\n\t\ttype: string;\n\t\tlevel: number;\n\t\trarity: string;\n\t\tvendor_value: number;\n\t\tgame_types: Array<string>;\n\t\tflags: Array<string>;\n\t\trestrictions: Array<string>;\n\t\tid: number;\n\t\tchat_link: string;\n\t\ticon: string;\n\t};\n}\n\nconst BREADCRUMBS: IBreadcrumbProps[] = [\n\t{ href: \"/\", icon: \"folder-close\", text: \"Home\" },\n\t{ href: \"/Softwares\", icon: \"folder-close\", text: \"Webapps\" },\n\t{ icon: \"document\", text: \"SkrittKit\" },\n];\n\nexport const GET_REQ = (request: RequestInfo): Promise<any> => {\n\treturn new Promise((resolve, reject) => {\n\t\tlet response: Response;\n\t\tfetch(request)\n\t\t\t.then((res) => {\n\t\t\t\tresponse = res;\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then((body) => {\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tresolve(body);\n\t\t\t\t} else {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t});\n\t});\n};\nexport default function SkrittKit(props: any) {\n\t// State variables\n\t// const myTable : JSX.Element = <></>;\n\tconst [myTable, setTable] = useState(<></>);\n\t// const PriceData = null;\n\tconst [PriceData, setPriceData] = useState(Object);\n\tconst [MyString, setMyString] = useState(\"greatest\");\n\t// Graphql resources\n\tconst { Copper, Silver, Gold } = props.data;\n\n\tfunction handlePriceSubmit(event: any) {\n\t\tlet ID = \"24350\";\n\t\tconst retval: any = [];\n\n\t\t// const ImagePath : IItems = GET_REQ(\"https://api.guildwars2.com/v2/items?id=\" + ID.toString()).then(\n\t\t// alert(ImagePath)\n\t\t// setMyString(ImagePath)\n\t\t// alert (ImagePath)\n\t\t// retval.push(ImagePath.length)\n\t\t// );\n\n\t\tpriceAPI.readAll().then((response: any) => {\n\t\t\tsetPriceData(response);\n\t\t\tconst updatedPrices = response.map(async (price: GW2TP, i: number) => {\n\t\t\t\tconst buyprice: number = price.data.buy_at;\n\t\t\t\tconst ID: number = price.data.id;\n\n\t\t\t\tretval.push(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td className=\"border\">{price.data.id} </td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<img className=\"w-8 h-8 inline\" src={price.data.icon} />\n\t\t\t\t\t\t\t\t{price.data.name}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<GW2_PriceTag\n\t\t\t\t\t\t\t\t\tGoldValue={Math.floor(buyprice / 10000) % 100}\n\t\t\t\t\t\t\t\t\tSilverValue={Math.floor(buyprice / 100) % 100}\n\t\t\t\t\t\t\t\t\tCopperValue={Math.floor(buyprice / 100) % 100}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{Math.floor(buyprice / 10000) % 100}\n\t\t\t\t\t\t\t\t<Img fixed={Gold.childImageSharp.fixed} />\n\t\t\t\t\t\t\t\t{Math.floor(buyprice / 100) % 100}\n\t\t\t\t\t\t\t\t<Img fixed={Silver.childImageSharp.fixed} />\n\t\t\t\t\t\t\t\t{buyprice % 100}\n\t\t\t\t\t\t\t\t<Img fixed={Copper.childImageSharp.fixed} />\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>{Math.floor(buyprice / 100) % 100}</td>\n\t\t\t\t\t\t\t<td>{buyprice % 100}</td>\n\t\t\t\t\t\t\t<td>30</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</>,\n\t\t\t\t);\n\n\t\t\t\tlet ImageLink = \"\";\n\t\t\t\tif (ID !== 10) {\n\t\t\t\t\taxios\n\t\t\t\t\t\t.get(\"https://api.guildwars2.com/v2/items?id=\" + ID.toString())\n\t\t\t\t\t\t.then((res: Response_Items) => {\n\t\t\t\t\t\t\tImageLink = res.data.icon;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsetTable(retval);\n\t\t});\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<NavSection />\n\t\t\t<GW2ItemTrackerDashboard />\n\t\t</>\n\t);\n}\n\n// Gets copper, silver and gold coins\nexport const query = graphql`\n\t{\n\t\tCopper: file(relativeDirectory: { eq: \"images/gw2\" }, name: { eq: \"Copper_coin\" }) {\n\t\t\tchildImageSharp {\n\t\t\t\tfixed(width: 15, height: 15) {\n\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSilver: file(relativeDirectory: { eq: \"images/gw2\" }, name: { eq: \"Silver_coin\" }) {\n\t\t\tchildImageSharp {\n\t\t\t\tfixed(width: 15, height: 15) {\n\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tGold: file(relativeDirectory: { eq: \"images/gw2\" }, name: { eq: \"Gold_coin\" }) {\n\t\t\tchildImageSharp {\n\t\t\t\tfixed(width: 15, height: 15) {\n\t\t\t\t\t...GatsbyImageSharpFixed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","module.exports = __webpack_public_path__ + \"static/hamburger-menu-90f395835954bc6e3ad41a208fce60f6.png\";"],"sourceRoot":""}