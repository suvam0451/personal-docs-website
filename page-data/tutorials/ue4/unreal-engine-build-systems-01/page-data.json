{"componentChunkName":"component---src-templates-mdx-posts-tsx","path":"/tutorials/ue4/unreal-engine-build-systems-01","result":{"data":{"mdx":{"id":"d42ded1a-a9b4-5bac-8990-436a014f2ee3","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/tutorials/ue4/unreal-engine-build-systems-01\",\n  \"title\": \"Build Systems(Basics) - Part 1/3\",\n  \"seotitle\": \"Customizing build system in Unreal Engine 4\",\n  \"date\": \"2019-05-04\",\n  \"tags\": [\"ue4\", \"version-control\", \"example\"],\n  \"description\": \"cli scripting.\",\n  \"moduleID\": 1,\n  \"submoduleID\": 2,\n  \"seriesID\": 2,\n  \"seriesIndex\": 1,\n  \"draft\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"About\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"About\", mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#About\",\n    \"aria-label\": \"About permalink\",\n    \"className\": \"inline-block ml-2 after after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"18\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"18\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"hr\", null), mdx(\"p\", null, \"UAT(\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Unreal Automation Tool\"), \") is used by the engine to process build requests. This includes building lighting, compiling plug-ins, packaging the game etc.\"), mdx(\"p\", null, \"But sometimes we would need \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"raw speed over UI flexibility\"), \" (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"or more importantly, for setting up automated build systems.\"), \").\\nIn this series, we will breakdown how default build systems are configured for the engine and how things actually work in the background.\"), mdx(\"p\", null, \"Then we will extract all those functionalities and reshape them as automation scripts. If you do not want to go through the technicalities, I will leave the scripts and instructions for download, of course.\\nSo lookout for that and lets get started.\"), mdx(Alert, {\n    head: \"Shader Instances !!!\",\n    body: \"For all Instances, the master material is compiled exactly once. Use these often to save build time.\",\n    mdxType: \"Alert\"\n  }), mdx(\"hr\", null), mdx(\"h4\", null, \"Cooking Shaders (-cook)\"), mdx(\"p\", null, \"It is THE most useful group command, at least as per my opinion. It lets us compile shaders.\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"%uat_path% BuildCookRun -project=%project_fullpath% -platform=%target_platform% -cook\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"%uat_path%\"), \": found at \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".\\\\Epic Games\\\\UE_4.2x\\\\Engine\\\\Build\\\\BatchFiles\\\\RunUAT.bat\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"-project\"), \": The FULL path to location where .uproject exists. This is because\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"-platform\"), \": (e.g. - Win64, NOT x64)\")), mdx(\"p\", null, \"This is very useful when adding heavy content packs with thousands of shaders\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(or when first-time-booting/changing engines since it resets the cached shaders)\"), \".\\nAdditionally, it will also compile the ~5000 shaders that compile on first-time bootup.\"), mdx(\"h4\", null, \"Basic Release Build\"), mdx(\"p\", null, \"Packages a build of the game. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-cook\"), \" flag compiles any remaining shaders.\\nSome flags are self explanatory \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"{-allmaps -stage -pak -build -archive}\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"batch\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-batch line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-batch\"\n  }), \"%uat_path% BuildCookRun %source_args% -project=%project_fullpath% -platform=%target_platform% -clientConfig=%mode_config% -cook -allmaps -stage -pak -build -archive -archivedirectory=%outdir%\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"-clientConfig\"), \": Development for SP games\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"-archivedirectory\"), \": This flag\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"(optional)\"), \", saves the built binaries to non-default folder.\")), mdx(\"h4\", null, \"Only compile C++ Code\"), mdx(\"p\", null, \"Compiling code is not the slowest link in the build chain.\\nAlso, if we don't compile shaders before a build, errors will be thrown.\\nFortunately compiling classes has nothing to do with cooking maps/compiling shaders.\\nIn any case, the following command can be used to compile C++ on the fly.\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(The only viable use-case is to develop code heavy plug-in, as we will see in later sections.)\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"batch\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber NaN\"\n    },\n    \"className\": \"language-batch line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-batch\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"rem %uat_path% BuildCookRun -project=%project_fullpath% -platform=%target_platform% -cook -allmaps -stage -pak -archive -archivedirectory=%outdir%\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/tutorials/ue4/unreal-engine-build-systems-01","title":"Build Systems(Basics) - Part 1/3","date":"2019-05-04","submoduleID":2,"seriesID":2,"seriesIndex":1}}},"pageContext":{"id":"d42ded1a-a9b4-5bac-8990-436a014f2ee3"}},"staticQueryHashes":["1060470014","1060470014","3422013792","4120013359"]}